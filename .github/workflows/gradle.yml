name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 리포지토리 체크아웃
      - uses: actions/checkout@v4

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.0.0

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드
      - name: Build with Gradle Wrapper
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          SERVICE_KEY: ${{ secrets.SERVICE_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SPRING_DATA_REDIS_HOST: ${{ secrets.EC2_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          SPRING_MAIL_USERNAME: ${{ secrets.SPRING_MAIL_USERNAME }}
          SPRING_MAIL_PASSWORD: ${{ secrets.SPRING_MAIL_PASSWORD }}
          UPLOAD_DIR: ${{ secrets.UPLOAD_DIR }}
          GYEONGGI_CURRENCY_DATA_KEY: ${{ secrets.GYEONGGI_CURRENCY_DATA_KEY }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: ./gradlew build -x test

      # Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/gunpo .

      # Docker 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker 이미지 푸시
      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/gunpo

      # EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 최신 Docker 이미지 가져오기
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/gunpo:latest

            # 기존 컨테이너 중지 및 삭제
            if [ $(sudo docker ps -a -q -f name=gunpo) ]; then
              sudo docker stop gunpo
              sudo docker rm gunpo
            fi

            if [ $(sudo docker ps -a -q -f name=Gunporedis) ]; then
              sudo docker stop Gunporedis
              sudo docker rm Gunporedis
            fi

            # .env 파일 생성
            echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" > .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
            echo "SERVICE_KEY=${{ secrets.SERVICE_KEY }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "SPRING_DATA_REDIS_HOST=${{ secrets.EC2_HOST }}" >> .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
            echo "SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }}" >> .env
            echo "SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}" >> .env
            echo "UPLOAD_DIR=${{ secrets.UPLOAD_DIR }}" >> .env
            echo "GYEONGGI_CURRENCY_DATA_KEY=${{ secrets.GYEONGGI_CURRENCY_DATA_KEY }}" >> .env
            echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
            echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
            echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
            echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env

            # Redis 컨테이너 실행
            sudo docker run -d --name Gunporedis -p 6379:6379 redis:latest

            # 애플리케이션 컨테이너 실행 (80과 8080 모두 허용)
            sudo docker run -d -p 80:8080 -p 8080:8080 \
              --name gunpo \
              --env-file .env \
              ${{ secrets.DOCKERHUB_USERNAME }}/gunpo:latest

            # 사용하지 않는 Docker 리소스 정리
            sudo docker system prune -f
